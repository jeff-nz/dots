#############
# INCLUDES
# :set syn=bash - to show color on bash mode
############# 
OS=`uname -s`
# Aliases and helpers
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# localfiles
if [ -f ~/.bash_local ]; then
    . ~/.bash_local
fi

#############
# include bin-work Folder
if [ -d "${HOME}/workutils/bin" ]; then
    export PATH=${PATH}:${HOME}/workutils/bin
fi

if [ -f ~/workutils/.bash_aliases ]; then
    . ~/workutils/.bash_aliases
fi

#############
#GOLANG
if [ -d "/usr/local/go" ]; then
    export GOROOT=/usr/local/go
    export GOROOT_BOOTSTRAP=${GOROOT}
    export PATH=${PATH}:${GOROOT}/bin
    if [ -d ${HOME}"/projects/go" ]; then
        export GOPATH=${HOME}/projects/go
        export GOBIN=${GOPATH}/bin
    else
        echo "Please create a folder in "${HOME}/projects/go" for go workspace"
    fi
else
    echo "Please install extract go in /usr/local/go and ADD export PATH=\$PATH:/usr/local/go/bin into etc/bash.bashrc";
fi

#############
#${HOME}/bin
export PATH=${PATH}:${HOME}/bin


#############
# BoF - Java, sdkman Stuff
if [ "${OS}" == "Darwin" ]; then
    export JAVA_HOME=$(/usr/libexec/java_home)
else
    export JAVA_HOME=/usr/lib/jvm/default
    export CLOUDSDK_PYTHON=python2
    export LD_LIBRARY_PATH=/usr/lib
fi

my-setup-sdk-java () {
    echo "RUNNING ${FUNCNAME[0]}..."

    local SDK_JAVA_PATH="/home/${USER}/.sdkman/candidates/java/current"
    local LIB_DIR_JAVA="/usr/lib/jvm"
    local LIB_DIR_DBEAVER="/usr/lib/dbeaver"

    # making sure sdk_java exist
    if [ ! -L "${SDK_JAVA_PATH}" ]; then
        echo "ERROR: Please setup JAVA in SDK. ${SDK_JAVA_PATH} does not exist.";
        return 1
    fi

    # java lib
    if [ -d "${LIB_DIR_JAVA}" ]; then
        echo "Setting path in ${LIB_DIR_JAVA}";

        sudo unlink "${LIB_DIR_JAVA}/default"
        sudo ln -s /home/jeff/.sdkman/candidates/java/current "${LIB_DIR_JAVA}/default"

        sudo unlink "${LIB_DIR_JAVA}/default-runtime"
        sudo ln -s /home/jeff/.sdkman/candidates/java/current "${LIB_DIR_JAVA}/default-runtime"
    fi

    # dbeaver lib
    if [ -d "${LIB_DIR_DBEAVER}" ]; then
        echo "Setting path in ${LIB_DIR_DBEAVER}";

        sudo unlink "${LIB_DIR_DBEAVER}/jre"
        sudo ln -s /home/jeff/.sdkman/candidates/java/current "${LIB_DIR_DBEAVER}/jre"
    fi

    echo "COMPLETED RUNNING ${FUNCNAME[0]}"
} # EoF - my-setup-sdk-java()


xmPlatformPull () {
    local PROJECT_DIR="${HOME}/projects/xm"
    local SERVICES=("config-daemon" "platform-services" "platform-central-configuration")

    for SERVICE in "${SERVICES[@]}"
    do
        DIR="${PROJECT_DIR}/${SERVICE}"
        echo "<<<<<<<<<<<<<<<"
        echo "Processing: ${DIR}"
        cd ${DIR} && git pull && cd -
        echo "Completed: ${DIR}"
        echo ">>>>>>>>>>>>>>"
    done
}


# EoF - Java, sdkman Stuff
##############


myNetSpeed () {
    for i in $(netstat -i | cut -f1 -d" " | tail -n+3) ; do echo "$i: $(sudo ethtool "$i" | grep Speed | sed 's/Speed://g')" ; done
}


my-addWideScreenResolution() {
    bash -c 'xrandr --newmode "2560x1080_60.00"  230.76  2560 2728 3000 3440  1080 1081 1084 1118  -HSync +Vsync'
    bash -c 'xrandr --addmode HDMI1 "2560x1080_60.00"'
    bash -c 'xrandr --output HDMI1 --mode "2560x1080_60.00"'

    bash -c 'xrandr --addmode HDMI-1 "2560x1080_60.00"'
    bash -c 'xrandr --output HDMI-1 --mode "2560x1080_60.00"'
}


my-addWideScreenResolution4k() {
    bash -c 'xrandr --newmode "3440x1440_36.00"  260.50  3440 3640 4008 4576  1440 1443 1453 1469 -hsync +vsync'
    bash -c 'xrandr --addmode HDMI1 "3440x1440_36.00"'
    bash -c 'xrandr --output HDMI1 --mode "3440x1440_36.00"'

    bash -c 'xrandr --addmode HDMI-1 "3440x1440_36.00"'
    bash -c 'xrandr --output HDMI-1 --mode "3440x1440_36.00"'
}


my-checkSSLCertExpiry() {
    for domain in "${@}"
    do
        echo "<<<<<<<<<<<<<<<<<<<<<<"
        echo ${domain}
        echo | openssl s_client -servername ${domain} -connect ${domain}:443 2>/dev/null | openssl x509 -noout -dates
        echo ">>>>>>>>>>>>>>>>>>>>>>"
    done
}


my-getCertBasicInfo() {
    for domain in "${@}"
    do
        echo "<<<<<<<<<<<<<<<<<<<<<<"
        echo ${domain}
        curl --insecure -vvI https://${domain} 2>&1 | awk 'BEGIN { cert=0 } /^\* SSL connection/ { cert=1 } /^\*/ { if (cert) print }'
        echo ">>>>>>>>>>>>>>>>>>>>>>"
    done
}

my-getCertFullInfo() {
    for domain in "${@}"
    do
        echo "<<<<<<<<<<<<<<<<<<<<<<"
        echo ${domain}
        openssl s_client -connect ${domain}:443 </dev/null 2>/dev/null | openssl x509 -inform pem -text
        echo ">>>>>>>>>>>>>>>>>>>>>>"
    done
}
