#############
# INCLUDES
# :set syn=bash - to show color on bash mode
############# 
OS=`uname -s`
# Aliases and helpers
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# localfiles
if [ -f ~/.bash_local ]; then
    . ~/.bash_local
fi

#############
#GOLANG
if [ -d "/usr/local/go" ]; then
    export GOROOT=/usr/local/go
    export GOROOT_BOOTSTRAP=${GOROOT}
    if [ -d ${HOME}"/projects/go" ]; then
        export GOPATH=${HOME}/projects/go
        export GOBIN=${GOPATH}/bin
    else
        echo "Please create a folder in "${HOME}/projects/go" for go workspace"
    fi
else
    echo "Please install extract go in /usr/local/go and ADD export PATH=\$PATH:/usr/local/go/bin into etc/bash.bashrc";
fi


#############
# BoF - Java, sdkman Stuff
export JAVA_HOME=/usr/lib/jvm/default

my-setup-sdk-java () {
    echo "RUNNING ${FUNCNAME[0]}..."

    local SDK_JAVA_PATH="/home/${USER}/.sdkman/candidates/java/current"
    local LIB_DIR_JAVA="/usr/lib/jvm"
    local LIB_DIR_DBEAVER="/usr/lib/dbeaver"

    # making sure sdk_java exist
    if [ ! -L "${SDK_JAVA_PATH}" ]; then
        echo "ERROR: Please setup JAVA in SDK. ${SDK_JAVA_PATH} does not exist.";
        return 1
    fi

    # java lib
    if [ -d "${LIB_DIR_JAVA}" ]; then
        echo "Setting path in ${LIB_DIR_JAVA}";

        sudo unlink "${LIB_DIR_JAVA}/default"
        sudo ln -s /home/jeff/.sdkman/candidates/java/current "${LIB_DIR_JAVA}/default"

        sudo unlink "${LIB_DIR_JAVA}/default-runtime"
        sudo ln -s /home/jeff/.sdkman/candidates/java/current "${LIB_DIR_JAVA}/default-runtime"
    fi

    # dbeaver lib
    if [ -d "${LIB_DIR_DBEAVER}" ]; then
        echo "Setting path in ${LIB_DIR_DBEAVER}";

        sudo unlink "${LIB_DIR_DBEAVER}/jre"
        sudo ln -s /home/jeff/.sdkman/candidates/java/current "${LIB_DIR_DBEAVER}/jre"
    fi

    echo "COMPLETED RUNNING ${FUNCNAME[0]}"
} # EoF - my-setup-sdk-java()

xmOpenTabs () {
    SERVICES=("config-daemon" "stores-daemon" "settings" "customers" "oauth2" "prices" "stocks" "tagz" "catalog-index" "catalog-search")
    for SERVICE in "${SERVICES[@]}"
    do
        DIR="/platform-services/${SERVICE}/${SERVICE}"
        if [ "${SERVICE}" == "config-daemon" ] ; then
            DIR="/${SERVICE}"
        fi

        terminator --new-tab --working-directory="~/projects/xm${DIR}"
    done
}

xmRun () {
    local DIRECTORY_NAME=$(basename ${PWD})
    local CONTAINER_MEMORY=${1:-256}
    local PROJECT_PROFILE=${2:-local,localdb,jeff}
    local MEMORY_LIMIT="128"
    local CONFIG_FOLDER="/projects/xm/platform-central-configuration"

    if [ "${DIRECTORY_NAME}" == "config-daemon" ]; then
        echo "RUNNING MVN on CONFIG DAEMON"

        MEMORY_LIMIT="96"
        echo "RAM LIMIT: ${MEMORY_LIMIT}MB"

        if [ ! -d "${HOME}${CONFIG_FOLDER}" ]; then
            echo "Please update CONFIG_FOLDER setting."
            echo "The directory for config does not exist: ${HOME}${CONFIG_FOLDER}"
            return 1
        fi

        MAVEN_OPTS="-Xmx${MEMORY_LIMIT}m" mvn clean package spring-boot:run -Dxmd.platform.config.local.dir=file://\$\{user.home\}${CONFIG_FOLDER}/
        return 1
    fi

    if [ "${DIRECTORY_NAME}" == "catalog-index" ]; then
        MEMORY_LIMIT="2048"
        CONTAINER_MEMORY="2048"
    fi

    if [ "${DIRECTORY_NAME}" == "customers" ]; then
        MEMORY_LIMIT="256"
    fi

    if [ "${DIRECTORY_NAME}" == "catalog-search" ]; then
        MEMORY_LIMIT="256"
    fi

    echo "RUNNING MVN on ${DIRECTORY_NAME}"
    echo "RAM LIMIT: ${MEMORY_LIMIT}MB"
    MAVEN_OPTS="-Xmx${MEMORY_LIMIT}m" mvn clean package spring-boot:run -Dmaven.test.skip=true -Dxmd.platform.spring.jvm.args="-Xmx${CONTAINER_MEMORY}m -Dspring.profiles.active=${PROJECT_PROFILE}"
} # EoF - xmRun()

xmPlatformPull () {
    local PROJECT_DIR="${HOME}/projects/xm"
    local SERVICES=("config-daemon" "platform-services" "platform-central-configuration")

    for SERVICE in "${SERVICES[@]}"
    do
        DIR="${PROJECT_DIR}/${SERVICE}"
        echo "<<<<<<<<<<<<<<<"
        echo "Processing: ${DIR}"
        cd ${DIR} && git pull && cd -
        echo "Completed: ${DIR}"
        echo ">>>>>>>>>>>>>>"
    done

}


# EoF - Java, sdkman Stuff
##############


